/********************************************************
*                                                       *
*   Copyright (C) Microsoft. All rights reserved.       *
*                                                       *
********************************************************/
"use strict";

var fs = require('fs'),
    path = require('path'),
    exec = require('child_process').exec,
    spawn = require('child_process').spawn,
    res = require('./lib/resources');

var packageDirectory = process.argv[2];

var npmInstallDir = process.argv[3];

var language = process.argv.length > 3 ? process.argv[4] : null;
res.init(language);

console.log(res.getString('EnsuringCorrectInstallation', packageDirectory));

// sanity check the provided packageDirectory- check for a package.json, parse out the version to be installed
var packageJsonPath = path.resolve(packageDirectory, 'package.json');
if (!fs.existsSync(packageJsonPath)) {
    console.error(res.getString('InvalidInstallSourceDirectory'));
    process.exit(1);
}
var packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
var packageName = packageJson.name;
var packageVersion = packageJson.version;
console.log(res.getString('NameOfPackage', packageName));
console.log(res.getString('VersionOfPackage', packageVersion));

// check what version (if any) is currently globally installed. If not yet installed, or a different version is, install from packageDirectory
var shouldInstall = false;
var installPath = path.join(npmInstallDir, 'node_modules', packageName);
var installedPackageJsonPath = path.join(installPath, 'package.json');
if (fs.existsSync(installedPackageJsonPath)) {
    var installedJson = JSON.parse(fs.readFileSync(installedPackageJsonPath, 'utf-8'));
    var installedVersion = installedJson.version;
    console.log(res.getString('InstalledVersion', installedVersion));
    if (installedVersion !== packageVersion) {
        console.log(res.getString('InstalledVersionDifferent'));
        shouldInstall = true;
    }
} else {
    console.log(res.getString('NotYetInstalled'));
    shouldInstall = true;
}

if (!shouldInstall) {
    console.log(res.getString('InstalledVersionSame'));
    process.exit(0);
}

function copyFiles(sourceDir, destDir) {
    var sourceFiles = fs.readdirSync(sourceDir);
    sourceFiles.forEach(function (file) {
        var stats = fs.statSync(path.join(sourceDir, file));
        if (stats.isFile()) {
            fs.writeFileSync(path.join(destDir, file), fs.readFileSync(path.join(sourceDir, file)));
        }
    });
}

// The spawn of npm install is windows specific for now, since we need to use spawn to launch with 'cmd'.
console.log(res.getString('InstallingGlobally'));
var npmInstall = spawn('cmd', ['/c', 'npm', '-g', 'install', packageDirectory]);
npmInstall.stdout.pipe(process.stdout);
npmInstall.stderr.pipe(process.stdout);
npmInstall.on('error', function (error) {
    console.log(res.getString('NpmInstallError', error));
});
npmInstall.on('exit', function (exitCode) {
    var installedFiles;
    if (fs.existsSync(installPath)) {
        installedFiles = fs.readdirSync(installPath);
    }
    var packageFiles = fs.readdirSync(packageDirectory);
        
    if (exitCode !== 0 || !installedFiles || packageFiles.length != installedFiles.length) {
        if (packageDirectory.indexOf('vs-mda-targets')) {
            // For some reason, the install failed - manually copy in the files
            if (!fs.existsSync(installPath)) {
                var dir = npmInstallDir;
                if (!fs.existsSync(dir)) {
                    fs.mkdir(dir);
                }
                dir = path.join(dir, 'node_modules');
                if (!fs.existsSync(dir)) {
                    fs.mkdir(dir);
                }
                fs.mkdir(installPath);
            }

            copyFiles(packageDirectory, installPath);
            copyFiles(path.join(packageDirectory, 'lib'), path.join(installPath, 'lib'));
            copyFiles(path.join(packageDirectory, 'resources'), path.join(installPath, 'resources'));

            console.log(res.getString('NpmInstallCompleted', packageName + '@' + packageVersion, packageDirectory));
            process.exit(-17);
        }
        console.log(res.getString('NpmInstallFailed', exitCode));
        process.exit(exitCode);
    } else {
        console.log(res.getString('NpmInstallCompleted', packageName+'@'+packageVersion, packageDirectory));
        process.exit(-17);
    }
});