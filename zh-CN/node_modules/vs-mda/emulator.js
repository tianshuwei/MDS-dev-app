/********************************************************
*                                                       *
*   Copyright (C) Microsoft. All rights reserved.       *
*                                                       *
********************************************************/
"use strict";

var cordova = require('cordova'),
    optimist = require('optimist'),
    util = require('./lib/util'),
    res = require('./lib/resources');

cordova.on('results', console.log);
cordova.on('log', console.log);
cordova.on('warn', console.warn);
cordova.on('verbose', console.log);

var argv = optimist.argv;
var platform = argv.platform;
var path = argv.path;
var language = argv.language;
var action = argv.action;
var configuration = argv.configuration;

res.init(language);

if (platform === 'ios') {
    var iosRemote = require('./lib/iosRemoteLaunch');
    var serverUrl = argv.serverUrl;
    var deployTarget = argv.deployTarget;
    if (action == "debug") {
        try {
            iosRemote.debug({ serverUrl: serverUrl, buildInfoFile: path, language: language }).
        fail(function (err) {
                console.error(res.getString('FailedRemoteiOSDebug', path, serverUrl, deployTarget, err.message));
                process.exit(1);
            }).
        done(function () {
                return 0;
            });
        } catch (e) {
            console.error(res.getString('FailedRemoteiOSDebug', path, serverUrl, deployTarget, e.message));
            console.error(e.stack);
            process.exit(1);
        }
    } else {
        try {
            iosRemote.launch({ serverUrl: serverUrl, buildInfoFile: path, target: deployTarget, language: language }).
        fail(function (err) {
                console.error(res.getString('FailedRemoteiOSEmulate', path, serverUrl, deployTarget, err.message));
                process.exit(1);
            }).
        done(function () {
                process.exit(0);
            });

        } catch (e) {
            console.error(res.getString('FailedRemoteiOSEmulate', path, serverUrl, deployTarget, e.message));
            console.error(e.stack);
            process.exit(1);
        }
    }
} else {

    process.chdir(path);

    // device, emulator, or target=(a specific emulator)
    var deployTarget = argv.deployTarget;
    
    if (argv.phone == 'phone') {
        cordova.raw.run({ platforms: [platform], options: ['--nobuild', '--' + deployTarget, '--phone', '--' + configuration ] });
    } else {
        cordova.raw.run({ platforms: [platform], options: ['--nobuild', '--' + deployTarget, '--' + configuration ] });
    }
}