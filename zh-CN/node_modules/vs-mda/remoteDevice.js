/********************************************************
*                                                       *
*   Copyright (C) Microsoft. All rights reserved.       *
*                                                       *
********************************************************/
"use strict";

var cordova = require('cordova'),
    optimist = require('optimist'),
    util = require('./lib/util'),
    res = require('./lib/resources');

cordova.on('results', console.log);
cordova.on('log', console.log);
cordova.on('warn', console.warn);
cordova.on('verbose', console.log);

var argv = optimist.argv;
var platform = argv.platform;
var path = argv.path;
var language = argv.language;
var action = argv.action;

res.init(language);

if (platform === 'ios') {
    var iosRemote = require('./lib/iosRemoteLaunch');
    var serverUrl = argv.serverUrl;
    if (action === 'deploy') {
        try {
            iosRemote.deviceDeploy({ serverUrl: serverUrl, buildInfoFile: path, language: language }).
            fail(function (err) {
                console.error(res.getString('FailedRemoteiOSDeploy', path, serverUrl, err.message));
                process.exit(1);
            }).
            done(function () {
                process.exit(0);
            });
        } catch (e) {
            console.error(res.getString('FailedRemoteiOSDeploy', path, serverUrl, e.message));
            console.error(e.stack);
            process.exit(1);
        }
    } else if (action === 'launch') {
        try {
            iosRemote.deviceLaunch({ serverUrl: serverUrl, buildInfoFile: path, language: language }).
            fail(function (err) {
                console.error(res.getString('FailedRemoteiOSLaunch', path, serverUrl, err.message));
                process.exit(1);
            }).
            done(function (arg) {
                process.exit(0);
            });
        } catch (e) {
            console.error(res.getString('FailedRemoteiOSLaunch', path, serverUrl, e.message));
            console.error(e.stack);
            process.exit(1);
        }
    } else if (action === 'debug') {
        try {
            iosRemote.debug({ serverUrl: serverUrl, buildInfoFile: path, language: language }).
            fail(function (err) {
                console.error(res.getString('FailedRemoteiOSDebug', path, serverUrl, err.message));
                process.exit(1);
            }).
            done(function (arg) {
                return 0; // In this scenario we need stdout to be flushed, and process.exit(0) does not behave appropriately.
            });
        } catch (e) {
            console.error(res.getString('FailedRemoteiOSDebug', path, serverUrl, e.message));
            console.error(e.stack);
            process.exit(1);
        }
    }
} else {
    
    process.chdir(path);
    
    // device, emulator, or target=(a specific emulator)
    var deployTarget = argv.deployTarget;
    
    cordova.raw.run({ platforms: [platform], options: ['--nobuild', '--' + deployTarget] });
}